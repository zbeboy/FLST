/*
 * This file is generated by jOOQ.
*/
package cn.edu.kmust.flst.domain.information_schema.tables;


import cn.edu.kmust.flst.domain.information_schema.InformationSchema;
import cn.edu.kmust.flst.domain.information_schema.tables.records.ConstantsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Constants extends TableImpl<ConstantsRecord> {

    private static final long serialVersionUID = 1986418559;

    /**
     * The reference instance of <code>information_schema.constants</code>
     */
    public static final Constants CONSTANTS = new Constants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConstantsRecord> getRecordType() {
        return ConstantsRecord.class;
    }

    /**
     * The column <code>information_schema.constants.constant_catalog</code>.
     */
    public final TableField<ConstantsRecord, String> CONSTANT_CATALOG = createField("constant_catalog", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.constants.constant_schema</code>.
     */
    public final TableField<ConstantsRecord, String> CONSTANT_SCHEMA = createField("constant_schema", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.constants.constant_name</code>.
     */
    public final TableField<ConstantsRecord, String> CONSTANT_NAME = createField("constant_name", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.constants.data_type</code>.
     */
    public final TableField<ConstantsRecord, Integer> DATA_TYPE = createField("data_type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>information_schema.constants.remarks</code>.
     */
    public final TableField<ConstantsRecord, String> REMARKS = createField("remarks", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.constants.sql</code>.
     */
    public final TableField<ConstantsRecord, String> SQL = createField("sql", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.constants.id</code>.
     */
    public final TableField<ConstantsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>information_schema.constants</code> table reference
     */
    public Constants() {
        this(DSL.name("constants"), null);
    }

    /**
     * Create an aliased <code>information_schema.constants</code> table reference
     */
    public Constants(String alias) {
        this(DSL.name(alias), CONSTANTS);
    }

    /**
     * Create an aliased <code>information_schema.constants</code> table reference
     */
    public Constants(Name alias) {
        this(alias, CONSTANTS);
    }

    private Constants(Name alias, Table<ConstantsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Constants(Name alias, Table<ConstantsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Constants as(String alias) {
        return new Constants(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Constants as(Name alias) {
        return new Constants(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Constants rename(String name) {
        return new Constants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Constants rename(Name name) {
        return new Constants(name, null);
    }
}
