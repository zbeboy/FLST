/*
 * This file is generated by jOOQ.
*/
package cn.edu.kmust.flst.domain.information_schema.tables.records;


import cn.edu.kmust.flst.domain.information_schema.tables.InDoubt;

import javax.annotation.Generated;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InDoubtRecord extends TableRecordImpl<InDoubtRecord> implements Record2<String, String> {

    private static final long serialVersionUID = -1083177641;

    /**
     * Setter for <code>information_schema.in_doubt.transaction</code>.
     */
    public void setTransaction(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>information_schema.in_doubt.transaction</code>.
     */
    @Size(max = 2147483647)
    public String getTransaction() {
        return (String) get(0);
    }

    /**
     * Setter for <code>information_schema.in_doubt.state</code>.
     */
    public void setState(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>information_schema.in_doubt.state</code>.
     */
    @Size(max = 2147483647)
    public String getState() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return InDoubt.IN_DOUBT.TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return InDoubt.IN_DOUBT.STATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getTransaction();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getState();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getTransaction();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getState();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InDoubtRecord value1(String value) {
        setTransaction(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InDoubtRecord value2(String value) {
        setState(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InDoubtRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InDoubtRecord
     */
    public InDoubtRecord() {
        super(InDoubt.IN_DOUBT);
    }

    /**
     * Create a detached, initialised InDoubtRecord
     */
    public InDoubtRecord(String transaction, String state) {
        super(InDoubt.IN_DOUBT);

        set(0, transaction);
        set(1, state);
    }
}
