/*
 * This file is generated by jOOQ.
*/
package cn.edu.kmust.flst.domain.information_schema.tables;


import cn.edu.kmust.flst.domain.information_schema.InformationSchema;
import cn.edu.kmust.flst.domain.information_schema.tables.records.FunctionColumnsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FunctionColumns extends TableImpl<FunctionColumnsRecord> {

    private static final long serialVersionUID = -2018353142;

    /**
     * The reference instance of <code>information_schema.function_columns</code>
     */
    public static final FunctionColumns FUNCTION_COLUMNS = new FunctionColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FunctionColumnsRecord> getRecordType() {
        return FunctionColumnsRecord.class;
    }

    /**
     * The column <code>information_schema.function_columns.alias_catalog</code>.
     */
    public final TableField<FunctionColumnsRecord, String> ALIAS_CATALOG = createField("alias_catalog", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.function_columns.alias_schema</code>.
     */
    public final TableField<FunctionColumnsRecord, String> ALIAS_SCHEMA = createField("alias_schema", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.function_columns.alias_name</code>.
     */
    public final TableField<FunctionColumnsRecord, String> ALIAS_NAME = createField("alias_name", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.function_columns.java_class</code>.
     */
    public final TableField<FunctionColumnsRecord, String> JAVA_CLASS = createField("java_class", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.function_columns.java_method</code>.
     */
    public final TableField<FunctionColumnsRecord, String> JAVA_METHOD = createField("java_method", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.function_columns.column_count</code>.
     */
    public final TableField<FunctionColumnsRecord, Integer> COLUMN_COUNT = createField("column_count", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>information_schema.function_columns.pos</code>.
     */
    public final TableField<FunctionColumnsRecord, Integer> POS = createField("pos", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>information_schema.function_columns.column_name</code>.
     */
    public final TableField<FunctionColumnsRecord, String> COLUMN_NAME = createField("column_name", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.function_columns.data_type</code>.
     */
    public final TableField<FunctionColumnsRecord, Integer> DATA_TYPE = createField("data_type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>information_schema.function_columns.type_name</code>.
     */
    public final TableField<FunctionColumnsRecord, String> TYPE_NAME = createField("type_name", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.function_columns.precision</code>.
     */
    public final TableField<FunctionColumnsRecord, Integer> PRECISION = createField("precision", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>information_schema.function_columns.scale</code>.
     */
    public final TableField<FunctionColumnsRecord, Short> SCALE = createField("scale", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>information_schema.function_columns.radix</code>.
     */
    public final TableField<FunctionColumnsRecord, Short> RADIX = createField("radix", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>information_schema.function_columns.nullable</code>.
     */
    public final TableField<FunctionColumnsRecord, Short> NULLABLE = createField("nullable", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>information_schema.function_columns.column_type</code>.
     */
    public final TableField<FunctionColumnsRecord, Short> COLUMN_TYPE = createField("column_type", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>information_schema.function_columns.remarks</code>.
     */
    public final TableField<FunctionColumnsRecord, String> REMARKS = createField("remarks", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.function_columns.column_default</code>.
     */
    public final TableField<FunctionColumnsRecord, String> COLUMN_DEFAULT = createField("column_default", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * Create a <code>information_schema.function_columns</code> table reference
     */
    public FunctionColumns() {
        this(DSL.name("function_columns"), null);
    }

    /**
     * Create an aliased <code>information_schema.function_columns</code> table reference
     */
    public FunctionColumns(String alias) {
        this(DSL.name(alias), FUNCTION_COLUMNS);
    }

    /**
     * Create an aliased <code>information_schema.function_columns</code> table reference
     */
    public FunctionColumns(Name alias) {
        this(alias, FUNCTION_COLUMNS);
    }

    private FunctionColumns(Name alias, Table<FunctionColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FunctionColumns(Name alias, Table<FunctionColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FunctionColumns as(String alias) {
        return new FunctionColumns(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FunctionColumns as(Name alias) {
        return new FunctionColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FunctionColumns rename(String name) {
        return new FunctionColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FunctionColumns rename(Name name) {
        return new FunctionColumns(name, null);
    }
}
