/*
 * This file is generated by jOOQ.
*/
package cn.edu.kmust.flst.domain.information_schema.tables;


import cn.edu.kmust.flst.domain.information_schema.InformationSchema;
import cn.edu.kmust.flst.domain.information_schema.tables.records.SequencesRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sequences extends TableImpl<SequencesRecord> {

    private static final long serialVersionUID = 2115005348;

    /**
     * The reference instance of <code>information_schema.sequences</code>
     */
    public static final Sequences SEQUENCES = new Sequences();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SequencesRecord> getRecordType() {
        return SequencesRecord.class;
    }

    /**
     * The column <code>information_schema.sequences.sequence_catalog</code>.
     */
    public final TableField<SequencesRecord, String> SEQUENCE_CATALOG = createField("sequence_catalog", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.sequences.sequence_schema</code>.
     */
    public final TableField<SequencesRecord, String> SEQUENCE_SCHEMA = createField("sequence_schema", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.sequences.sequence_name</code>.
     */
    public final TableField<SequencesRecord, String> SEQUENCE_NAME = createField("sequence_name", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.sequences.current_value</code>.
     */
    public final TableField<SequencesRecord, Long> CURRENT_VALUE = createField("current_value", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema.sequences.increment</code>.
     */
    public final TableField<SequencesRecord, Long> INCREMENT = createField("increment", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema.sequences.is_generated</code>.
     */
    public final TableField<SequencesRecord, Boolean> IS_GENERATED = createField("is_generated", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>information_schema.sequences.remarks</code>.
     */
    public final TableField<SequencesRecord, String> REMARKS = createField("remarks", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.sequences.cache</code>.
     */
    public final TableField<SequencesRecord, Long> CACHE = createField("cache", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema.sequences.min_value</code>.
     */
    public final TableField<SequencesRecord, Long> MIN_VALUE = createField("min_value", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema.sequences.max_value</code>.
     */
    public final TableField<SequencesRecord, Long> MAX_VALUE = createField("max_value", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema.sequences.is_cycle</code>.
     */
    public final TableField<SequencesRecord, Boolean> IS_CYCLE = createField("is_cycle", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>information_schema.sequences.id</code>.
     */
    public final TableField<SequencesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>information_schema.sequences</code> table reference
     */
    public Sequences() {
        this(DSL.name("sequences"), null);
    }

    /**
     * Create an aliased <code>information_schema.sequences</code> table reference
     */
    public Sequences(String alias) {
        this(DSL.name(alias), SEQUENCES);
    }

    /**
     * Create an aliased <code>information_schema.sequences</code> table reference
     */
    public Sequences(Name alias) {
        this(alias, SEQUENCES);
    }

    private Sequences(Name alias, Table<SequencesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sequences(Name alias, Table<SequencesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sequences as(String alias) {
        return new Sequences(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sequences as(Name alias) {
        return new Sequences(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sequences rename(String name) {
        return new Sequences(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sequences rename(Name name) {
        return new Sequences(name, null);
    }
}
