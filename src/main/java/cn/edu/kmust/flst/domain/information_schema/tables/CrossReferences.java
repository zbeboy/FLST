/*
 * This file is generated by jOOQ.
*/
package cn.edu.kmust.flst.domain.information_schema.tables;


import cn.edu.kmust.flst.domain.information_schema.InformationSchema;
import cn.edu.kmust.flst.domain.information_schema.tables.records.CrossReferencesRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CrossReferences extends TableImpl<CrossReferencesRecord> {

    private static final long serialVersionUID = 1921245520;

    /**
     * The reference instance of <code>information_schema.cross_references</code>
     */
    public static final CrossReferences CROSS_REFERENCES = new CrossReferences();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CrossReferencesRecord> getRecordType() {
        return CrossReferencesRecord.class;
    }

    /**
     * The column <code>information_schema.cross_references.pktable_catalog</code>.
     */
    public final TableField<CrossReferencesRecord, String> PKTABLE_CATALOG = createField("pktable_catalog", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.cross_references.pktable_schema</code>.
     */
    public final TableField<CrossReferencesRecord, String> PKTABLE_SCHEMA = createField("pktable_schema", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.cross_references.pktable_name</code>.
     */
    public final TableField<CrossReferencesRecord, String> PKTABLE_NAME = createField("pktable_name", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.cross_references.pkcolumn_name</code>.
     */
    public final TableField<CrossReferencesRecord, String> PKCOLUMN_NAME = createField("pkcolumn_name", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.cross_references.fktable_catalog</code>.
     */
    public final TableField<CrossReferencesRecord, String> FKTABLE_CATALOG = createField("fktable_catalog", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.cross_references.fktable_schema</code>.
     */
    public final TableField<CrossReferencesRecord, String> FKTABLE_SCHEMA = createField("fktable_schema", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.cross_references.fktable_name</code>.
     */
    public final TableField<CrossReferencesRecord, String> FKTABLE_NAME = createField("fktable_name", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.cross_references.fkcolumn_name</code>.
     */
    public final TableField<CrossReferencesRecord, String> FKCOLUMN_NAME = createField("fkcolumn_name", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.cross_references.ordinal_position</code>.
     */
    public final TableField<CrossReferencesRecord, Short> ORDINAL_POSITION = createField("ordinal_position", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>information_schema.cross_references.update_rule</code>.
     */
    public final TableField<CrossReferencesRecord, Short> UPDATE_RULE = createField("update_rule", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>information_schema.cross_references.delete_rule</code>.
     */
    public final TableField<CrossReferencesRecord, Short> DELETE_RULE = createField("delete_rule", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>information_schema.cross_references.fk_name</code>.
     */
    public final TableField<CrossReferencesRecord, String> FK_NAME = createField("fk_name", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.cross_references.pk_name</code>.
     */
    public final TableField<CrossReferencesRecord, String> PK_NAME = createField("pk_name", org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>information_schema.cross_references.deferrability</code>.
     */
    public final TableField<CrossReferencesRecord, Short> DEFERRABILITY = createField("deferrability", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>information_schema.cross_references</code> table reference
     */
    public CrossReferences() {
        this(DSL.name("cross_references"), null);
    }

    /**
     * Create an aliased <code>information_schema.cross_references</code> table reference
     */
    public CrossReferences(String alias) {
        this(DSL.name(alias), CROSS_REFERENCES);
    }

    /**
     * Create an aliased <code>information_schema.cross_references</code> table reference
     */
    public CrossReferences(Name alias) {
        this(alias, CROSS_REFERENCES);
    }

    private CrossReferences(Name alias, Table<CrossReferencesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CrossReferences(Name alias, Table<CrossReferencesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CrossReferences as(String alias) {
        return new CrossReferences(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CrossReferences as(Name alias) {
        return new CrossReferences(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CrossReferences rename(String name) {
        return new CrossReferences(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CrossReferences rename(Name name) {
        return new CrossReferences(name, null);
    }
}
