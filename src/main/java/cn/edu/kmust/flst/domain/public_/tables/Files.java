/*
 * This file is generated by jOOQ.
*/
package cn.edu.kmust.flst.domain.public_.tables;


import cn.edu.kmust.flst.domain.public_.Indexes;
import cn.edu.kmust.flst.domain.public_.Keys;
import cn.edu.kmust.flst.domain.public_.Public;
import cn.edu.kmust.flst.domain.public_.tables.records.FilesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Files extends TableImpl<FilesRecord> {

    private static final long serialVersionUID = -304970248;

    /**
     * The reference instance of <code>public.files</code>
     */
    public static final Files FILES = new Files();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilesRecord> getRecordType() {
        return FilesRecord.class;
    }

    /**
     * The column <code>public.files.file_id</code>.
     */
    public final TableField<FilesRecord, String> FILE_ID = createField("file_id", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.files.size</code>.
     */
    public final TableField<FilesRecord, Long> SIZE = createField("size", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.files.original_file_name</code>.
     */
    public final TableField<FilesRecord, String> ORIGINAL_FILE_NAME = createField("original_file_name", org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>public.files.new_name</code>.
     */
    public final TableField<FilesRecord, String> NEW_NAME = createField("new_name", org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>public.files.relative_path</code>.
     */
    public final TableField<FilesRecord, String> RELATIVE_PATH = createField("relative_path", org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.files.ext</code>.
     */
    public final TableField<FilesRecord, String> EXT = createField("ext", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.files.upload_date</code>.
     */
    public final TableField<FilesRecord, Timestamp> UPLOAD_DATE = createField("upload_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.files</code> table reference
     */
    public Files() {
        this(DSL.name("files"), null);
    }

    /**
     * Create an aliased <code>public.files</code> table reference
     */
    public Files(String alias) {
        this(DSL.name(alias), FILES);
    }

    /**
     * Create an aliased <code>public.files</code> table reference
     */
    public Files(Name alias) {
        this(alias, FILES);
    }

    private Files(Name alias, Table<FilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Files(Name alias, Table<FilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FilesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FilesRecord>> getKeys() {
        return Arrays.<UniqueKey<FilesRecord>>asList(Keys.CONSTRAINT_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Files as(String alias) {
        return new Files(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Files as(Name alias) {
        return new Files(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Files rename(String name) {
        return new Files(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Files rename(Name name) {
        return new Files(name, null);
    }
}
